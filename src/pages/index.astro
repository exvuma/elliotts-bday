---
import { Image } from 'astro:assets'
import Layout from '../layouts/Layout.astro'
import EventDetails from '../components/EventDetails/EventDetails.astro'
import EventDetail from '../components/EventDetails/EventDetail.astro'
import Waves from '../components/Waves.astro'
import ButtonLink from '../components/ButtonLink.astro'
import LighthouseImage from '../assets/Elliott-craw.png'
import Redline from '../assets/redline.png'
---

<Layout title="John and Victoria's Baby Bash">
  <h1 class="card-title-1">Elliott's 1st Birthday</h1>
  <img src={Redline.src} alt="Horizontal rule" />
  <h2 class="card-title-2">Crawfish, veggies, and frozen bevies</h2>
  <div class="mt-2">
    <EventDetails>
      <EventDetail>
        <span slot="detail-term">When</span>
        <span slot="detail-definition">4pm<br />Saturday, March 29th 18th, 2025</span>
      </EventDetail>
      <EventDetail>
        <span slot="detail-term">Where</span>
        <span slot="detail-definition">5302 Roosevelt Ave, Austin, TX 78756</span>
      </EventDetail>
      <!-- <EventDetail>
        <span slot='detail-term'>RSVP</span>
        <span slot='detail-definition'>
          â†’ <a href='/rsvp'>Come join us, Sailor!</a>
        </span>
      </EventDetail> -->
    </EventDetails>
    <div class="mt-5">
      <ButtonLink to="rsvp" variant="wavey">
        <!-- <ButtonLink to='https://www.babylist.com/list/turnonthefawcets' variant='wavey'> -->
        I want to go!!
      </ButtonLink>
    </div>
    <!-- <ButtonLink to="#">View Registry</ButtonLink> -->
  </div>
  <div class="lighthouse-holder">
    <img
      class="lighthouse-img"
      src={LighthouseImage.src}
      alt="Elliott Crawfish"
      width="600"
    />
  </div>
  <Waves />
</Layout>
<style>
  .card-separator {
    display: block;
    width: 85%;
    height: auto;
    margin: 2rem auto;
  }

  .card-separator::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #ff0000;
    /* Create wavy, hand-drawn effect */
    clip-path: path(
      'M0,2 Q5,5,10,2 T20,2 T30,2 T40,2 T50,2 T60,2 T70,2 T80,2 T90,2 T100,2'
    );
    animation: wobble 10s ease-in-out infinite;
    opacity: 0.8;
  }

  @keyframes wobble {
    0%,
    100% {
      transform: skew(-2deg) translateY(0px);
    }
    50% {
      transform: skew(2deg) translateY(2px);
    }
  }

  @media screen and (max-width: 600px) {
    .lighthouse-holder {
      width: 80%;
    }
    .lighthouse-img {
      width: 100%;
      height: auto;
    }
  }
</style>
<script>
  import confetti from 'canvas-confetti'
  import { getReservation } from '../lib/api/reservations'
  import { getUser } from '../lib/user'

  type ConfettiOptions = Exclude<
    typeof confetti extends (options: infer P) => any ? P : never,
    undefined
  >

  function fireConfetti() {
    interface FireOptions extends ConfettiOptions {
      ratio: number
      count?: number
    }

    function fire({ origin = { y: 0.7 }, count = 200, ratio, ...opts }: FireOptions) {
      confetti({
        ...opts,
        particleCount: Math.floor(count * ratio),
      })
    }

    const plan: FireOptions[] = [
      {
        ratio: 0.25,
        spread: 26,
        startVelocity: 55,
      },
      {
        ratio: 0.2,
        spread: 60,
      },
      {
        ratio: 0.35,
        spread: 100,
        decay: 0.91,
        scalar: 0.8,
      },
      {
        ratio: 0.1,
        spread: 120,
        startVelocity: 25,
        decay: 0.92,
        scalar: 1.2,
      },
      {
        ratio: 0.1,
        spread: 120,
        startVelocity: 45,
      },
    ]

    plan.forEach(fire)
  }

  document.addEventListener('astro:page-load', () => {
    setTimeout(fireConfetti, 1000)

    document.querySelectorAll('.lighthouse-img').forEach((el) => {
      el.addEventListener('click', () => {
        fireConfetti()
      })
    })

    document.querySelectorAll('.card-ocean-bg').forEach((el) => {
      if (!(el instanceof HTMLCanvasElement)) {
        throw new Error(
          'Invalid element specifed for .card-ocean-bg. You biffed your markup',
        )
      }

      initOceanBg(el)
    })
  })

  function initOceanBg(el: HTMLCanvasElement) {
    const ctx = el.getContext('2d')

    // ctx.
  }

  async function updateBasedOnUserState() {
    const user = getUser()

    if (!user) return

    const reservation = await getReservation(user.email)

    if (!reservation) return

    document.querySelectorAll('#rsvp-btn').forEach((el) => {
      el.innerHTML = 'Update your reservation'
    })
  }

  updateBasedOnUserState()
</script>
