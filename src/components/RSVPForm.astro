---
import Toast from './Toast.astro'
---

<Toast id='rsvp-form-errors' type='error' show={false} />
<Toast id='rsvp-form-success' type='success' show={false} />
<form class='rsvp-form'>
  <div class='form-group'>
    <label>Name</label>
    <input type='text' name='name' />
  </div>
  <div class='form-group'>
    <label>Email</label>
    <input type='email' name='email' />
  </div>
  <div class='form-group'>
    <label>Additional Guests</label>
    <input type='number' name='additional_guests' value='0' min='0' />
  </div>
  <div class='form-group'>
    <label
      >Crawfish?<br /><span style='font-size: 0.8rem'
        >Will you actually want crawfish? Dietary restrictions?</span
      ></label
    >
    <input type='text' name='notes' />
  </div>
  <div class='form-group form-group-submit'>
    <button>Submit</button>
  </div>
</form>
<style></style>
<script>
  import {
    createReservation,
    getReservation,
    type Reservation,
  } from '../lib/api/reservations'
  import { getUser } from '../lib/user'

  document.addEventListener('astro:page-load', () => {
    prepopulateFromPreviousReservations()
  })

  document.querySelectorAll('.rsvp-form').forEach($form => {
    if (!($form instanceof HTMLFormElement)) {
      return
    }

    $form.addEventListener('submit', async e => {
      e.preventDefault()
      try {
        await createReservation(reservationFromForm($form))
        showSuccessMesasge(
          'Reservation created! You can come back and update it anytime.',
        )
      } catch (e) {
        if (e instanceof ValidationError) {
          showErrorMessage(e.validationMessage)
        } else {
          showErrorMessage('An unknown error occurred. Text John or Victoria.')
        }
      }
    })
  })

  async function prepopulateFromPreviousReservations() {
    const user = getUser()

    if (!user) return

    const reservation = await getReservation(user.email)

    if (!reservation) return

    for (const key in reservation) {
      syncField(key, (reservation as any)[key])
    }
  }

  function syncField(key: string, value: string) {
    document.querySelectorAll(`[name="${key}"]`).forEach(el => {
      if (el instanceof HTMLInputElement) {
        el.value = value
      }
    })
  }

  function reservationFromForm($form: HTMLFormElement): Reservation {
    const data = new FormData($form)
    const additional_guests = parseInt(data.get('additional_guests')?.toString() ?? '')
    const email = data.get('email')?.toString() ?? ''
    const name = data.get('name')?.toString() ?? ''
    const notes = data.get('notes')?.toString() ?? ''

    if (isNaN(additional_guests)) {
      throw new ValidationError(
        'additional_guests',
        data.get('additional_guests'),
        "I don't know how, or why, but you somehow entered an invalid value for Additional Guests. It should be an integer >= 0",
      )
    }

    if (email.length < 3 || !email.includes('@') || email.length > 100) {
      throw new ValidationError('email', data.get('email'), 'Use a valid email you jag')
    }

    if (name.length < 1 || name.length > 100) {
      throw new ValidationError('name', data.get('name'), 'Use a valid name you jag')
    }

    return {
      additional_guests,
      email,
      name,
      notes,
    }
  }

  function showErrorMessage(text: string) {
    document.querySelectorAll('#rsvp-form-errors').forEach(el => {
      el.classList.remove('display-none')
      el.querySelectorAll('.toast-content').forEach(el => {
        el.innerHTML = text
      })
    })
  }

  function showSuccessMesasge(text: string) {
    document.querySelectorAll('#rsvp-form-success').forEach(el => {
      el.classList.remove('display-none')
      el.querySelectorAll('.toast-content').forEach(el => {
        el.innerHTML = text
      })
    })
  }

  class ValidationError extends Error {
    constructor(
      public field: string,
      public value: any,
      public validationMessage: string,
    ) {
      super(`Invalid value for field ${field}: ${value}`)
    }
  }
</script>
<style>
  .rsvp-form {
    max-width: 30rem;
    margin: 2rem auto;
    /* Make the form feel more centered */
    padding-right: 5rem;
  }

  .form-group {
    display: flex;
    align-items: center;
    margin: 1rem 0;
  }

  .form-group label {
    flex: 1;
    margin-right: 1rem;
    text-align: right;
    max-width: 35%;
    font-size: 1rem;
  }

  .form-group input {
    flex: 1;
    padding: 0.6rem;
    font-size: 1rem;
  }

  .form-group-submit {
    justify-content: flex-end;
  }

  .form-group-submit button {
    font-size: 1rem;
    border: none;
    background-color: var(--brown-1);
    color: white;
    /* background: transparent; */
    /* border: solid var(--brown-2); */
    border-radius: 1px;
    padding: 0.5rem 2rem;
    cursor: pointer;
  }

  .form-group-submit button:hover,
  .form-group-submit button:active {
    background-color: var(--brown-2);
  }

  @media screen and (max-width: 600px) {
    .rsvp-form {
      max-width: 100%;
      padding-right: 0;
    }

    .form-group {
      flex-direction: column;
      align-items: flex-start;
    }

    .form-group label {
      text-align: left;
      max-width: 100%;
      width: 100%;
    }

    .form-group input {
      width: 100%;
    }

    .form-group-submit button {
      width: 100%;
      font-size: 1.5rem;
      padding: 1.5rem;
    }
  }
</style>
